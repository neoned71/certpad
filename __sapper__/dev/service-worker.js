(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1628393007114;

	const files = [
		"/service-worker-index.html",
		"/favicon.png",
		"/global.css",
		"/images/1627502235616.jpeg",
		"/images/1627502295680.jpeg",
		"/images/1627562793636.jpeg",
		"/images/1628391109032.jpeg",
		"/images/1628391290480.png",
		"/images/1628391502839.jpeg",
		"/images/1628392358453.jpeg",
		"/images/1628392366478.jpeg",
		"/images/1628392885186.png",
		"/images/1628392887204.png",
		"/images/blank.jpg",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.0ae6daf2.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.e0391497.js",
		"/client/successkid.d53948a6.js",
		"/client/index.093d0f5d.js",
		"/client/index.e2622a62.js",
		"/client/index.897f08f8.js",
		"/client/[slug].4ac1fdfd.js",
		"/client/index.c152b034.js",
		"/client/index.69cbb589.js",
		"/client/index.b8a6e6d3.js",
		"/client/about.e1be35a4.js",
		"/client/index.43e4ddf9.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});


	/**
	 * Fetch the asset from the network and store it in the cache. 
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
		const cache = await caches.open(`offline${timestamp}`);

		try {
			const response = await fetch(request);
			cache.put(request, response.clone());
			return response;
		} catch (err) {
			const response = await cache.match(request);
			if (response) return response;

			throw err;
		}
	}

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		const isHttp = url.protocol.startsWith('http');
		const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
		const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
		const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

		if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
			event.respondWith(
				(async () => {
					// always serve static files and bundler-generated assets from cache.
					// if your application has other URLs with data that will never change,
					// set this variable to true for them and they will only be fetched once.
					const cachedAsset = isStaticAsset && await caches.match(event.request);

					// for pages, you might want to serve a shell `service-worker-index.html` file,
					// which Sapper has generated for you. It's not right for every
					// app, but if it's right for yours then uncomment this section
					/*
					if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
						return caches.match('/service-worker-index.html');
					}
					*/

					return cachedAsset || fetchAndCache(event.request);
				})()
			);
		}
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
